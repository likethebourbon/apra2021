"""Code for the web app's glossary, found within the help menu."""

import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html
import dash_katex as dk

churn_terminology = dcc.Markdown(
    """At-risk donor

* A donor who will churn.

Churn

* Giving behavior defined by a donor giving in one fiscal year but not the following fiscal year.

Safe donor

* A donor who will not churn.
""",
)

data_prep_terminology = dcc.Markdown(
    """Data leakage

* When a machine learning algorithm learns from data that wouldn’t (or shouldn’t) be available in a real-world scenario. This can happen during normalization, feature engineering, train/test data splitting, etc.

Feature

* Independent variable, stored as a column.

Feature engineering

* The process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive.

    *Examples:* aggregating total amount given per year from individual gifts, calculating average clicks per month by each customer.

Imbalanced data

* Data where the target classes are not equally represented. Imbalanced data sets can be difficult to model and evaluate.

Matrix

* An array of numbers with one or more rows and one or more columns.

Normalization

* The process of transforming a feature's distribution to become more like a normal bell curve.

Observation

* Individual record in a table, stored as a row (also called data point, sample, record, trial, case, etc.).

One-hot encoding

* Transforming a single categorical feature into a number of binary columns, one for each feature. Also called dummy variables.

Target

* Dependent variable, what we are trying to predict.

Testing data

* The data that machine learning models use to evaluate the generalizability of the model built from training data. Testing data is unseen by the algorithm during the training phase.

Training data

* The data a machine learning algorithm uses to learn properties and build a model.

Vector

* A list of numbers (can be either a row or a column) with only one dimension.
""",
)

ml_terminology = dcc.Markdown(
    """Binary classification

* A classification problem where the target has two classes, positive and negative.

Classification

* A prediction task where the target consists of two or more classes and we want to learn from already labeled data how to predict the class of unlabeled data. Churn analysis is a classification task.

    *Examples:* Spam detection, optical character recognition, cancer detection

Decision threshold

* The boundary that separates class predictions. A donor is predicted to churn if their prediction probability >= the decision threshold. This parameter may be changed by end users.

Machine Learning

* Family of methods to learn properties about data and apply them to unseen data. Machine learning algorithms build a mathematical model based on sample data, known as "training data", in order to make predictions or decisions without being explicitly programmed to perform the task. Machine learning can be supervised or unsupervised.

Prediction probability

* The probability that a given data point belongs to the positive class. This is generated by the model.

Regression

* A prediction task where the target consists of one or more continuous variables. An example of a regression problem would be the prediction of the length of a salmon as a function of its age and weight.

    *Examples:* Predicting stock prices, credit scores, survival analysis

Supervised learning

* A machine learning task where the target is known. Algorithms map an input to an output based on input-output pairs. Can be either classification or regression.

Unsupervised learning

* A machine learning task where algorithms draw inferences from datasets with no pre-existing labels and with a minimum of human supervision.

    *Examples:* Cluster analysis, anomaly detection, dimensionality reduction
""",
)

bc_1 = [
    dcc.Markdown("""False negative (FN)"""),
    dcc.Markdown(
        """

* An incorrectly predicted negative classification. Type II error.

    *For churn modeling:* At-risk donors below the decision threshold.
""",
        style={
            "font-family": "Open Sans, HelveticaNeue, Helvetica Neue, Helvetica, Arial, sans-serif"
        },
    ),
]

bc_2 = [
    dcc.Markdown("""False positive (FP)"""),
    dcc.Markdown(
        """

* An incorrectly predicted positive classification. Also known as a Type I error.

    *For churn modeling:* Safe donors at or above the decision threshold.
"""
    ),
]

bc_3 = [
    dcc.Markdown("""True negative (TN)"""),
    dcc.Markdown(
        """

* A correctly predicted negative classification.

    *For churn modeling:* Safe donors below the decision threshold.
"""
    ),
]

bc_4 = [
    dcc.Markdown("""True Positive (TP)"""),
    dcc.Markdown(
        """

* A correctly predicted positive classification.

    *For churn modeling:* At-risk donors at or above the decision threshold.
"""
    ),
]

binary_classification_terminology = [*bc_1, *bc_2, *bc_3, *bc_4]

me_1 = [
    dcc.Markdown(
        """Confusion Matrix

* A grid that compares predicted results to actual results. A confusion matrix for a binary classification model will be a 2x2 grid, where rows represent the predicted class and columns represent the actual class.

"""
    ),
    dk.DashKatex(expression=r"CM = \begin{bmatrix}TN & FP\\FN & TP\end{bmatrix}", displayMode=True),
]

me_2 = [
    dcc.Markdown(
        """Accuracy

* The proportion of classes that were correctly predicted. Has a range of 0 to 1.

"""
    ),
    dk.DashKatex(
        expression=r"\text{Accuracy = }\frac{TP + TN}{TP + FP + TN + FN}", displayMode=True
    ),
]

me_3 = [
    dcc.Markdown(
        """Precision

* The fraction of correct positive predictions among all positive predictions. High precision means that an algorithm returned substantially more relevant results than irrelevant ones.  Has a range of 0 to 1.

"""
    ),
    dk.DashKatex(expression=r"\text{Precision = }\frac{TP}{TP + FP}", displayMode=True),
]

me_4 = [
    dcc.Markdown(
        """Recall

* Recall is the ability of a model to find all the relevant cases within a dataset. High recall means that an algorithm returned most of the relevant results. Has a range of 0 to 1.

"""
    ),
    dk.DashKatex(expression=r"\text{Recall = }\frac{TP}{TP+FN}", displayMode=True),
]

me_5 = [
    dcc.Markdown(
        """F1 score

* The harmonic mean of precision and recall. Harmonic means are used when finding the average of rates.

"""
    ),
    dk.DashKatex(
        expression=r"F_1\text{ = 2}\cdot\frac{\text{Precision }\cdot\text{ Recall}}{\text{Precision }+\text{ Recall}}",
        displayMode=True,
    ),
]
me_terminology = [*me_1, *me_2, *me_3, *me_4, *me_5]

churn_card = dbc.Card(
    [
        dbc.CardHeader(
            html.H4(
                dbc.Button("Churn Terminology", color="link", id="churn_button"),
            )
        ),
        dbc.Collapse(dbc.CardBody(churn_terminology), id="churn_collapse"),
    ],
    id="churn_card",
    style={"border": 0},
)


dp_card = dbc.Card(
    [
        dbc.CardHeader(
            html.H4(
                dbc.Button("Data Preparation Terminology", color="link", id="dp_button"),
            )
        ),
        dbc.Collapse(dbc.CardBody(data_prep_terminology), id="dp_collapse"),
    ],
    id="dp_card",
    style={"border": 0},
)


ml_card = dbc.Card(
    [
        dbc.CardHeader(
            html.H4(
                dbc.Button("Machine Learning Terminology", color="link", id="ml_button"),
            )
        ),
        dbc.Collapse(dbc.CardBody(ml_terminology), id="ml_collapse"),
    ],
    id="ml_card",
    style={"border": 0},
)


bc_card = dbc.Card(
    [
        dbc.CardHeader(
            html.H4(
                dbc.Button("Binary Classification Terminology", color="link", id="bc_button"),
            )
        ),
        dbc.Collapse(dbc.CardBody([*binary_classification_terminology]), id="bc_collapse"),
    ],
    id="bc_card",
    style={"border": 0},
)


me_card = dbc.Card(
    [
        dbc.CardHeader(
            html.H4(
                dbc.Button("Model Evaluation Terminology", color="link", id="me_button"),
            ),
        ),
        dbc.Collapse(dbc.CardBody([*me_terminology]), id="me_collapse"),
    ],
    id="me_card",
    style={"border": 0},
)


churn_glossary = dbc.Modal(
    [
        dbc.ModalHeader("Definitions by Topic"),
        dbc.ModalBody([churn_card, dp_card, ml_card, bc_card, me_card], style={"padding": 0}),
        dbc.ModalFooter(
            dbc.Button("Close", id="glossary_churn_close", className="ml-auto"),
            style={"border-top": 0},
        ),
    ],
    id="glossary_churn",
    scrollable=True,
    size="lg",
)
